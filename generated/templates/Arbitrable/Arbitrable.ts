// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MetaEvidence extends ethereum.Event {
  get params(): MetaEvidence__Params {
    return new MetaEvidence__Params(this);
  }
}

export class MetaEvidence__Params {
  _event: MetaEvidence;

  constructor(event: MetaEvidence) {
    this._event = event;
  }

  get _metaEvidenceID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _evidence(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Dispute extends ethereum.Event {
  get params(): Dispute__Params {
    return new Dispute__Params(this);
  }
}

export class Dispute__Params {
  _event: Dispute;

  constructor(event: Dispute) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _metaEvidenceID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _evidenceGroupID(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Evidence extends ethereum.Event {
  get params(): Evidence__Params {
    return new Evidence__Params(this);
  }
}

export class Evidence__Params {
  _event: Evidence;

  constructor(event: Evidence) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _evidenceGroupID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _party(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _evidence(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Ruling extends ethereum.Event {
  get params(): Ruling__Params {
    return new Ruling__Params(this);
  }
}

export class Ruling__Params {
  _event: Ruling;

  constructor(event: Ruling) {
    this._event = event;
  }

  get _arbitrator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _disputeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Arbitrable extends ethereum.SmartContract {
  static bind(address: Address): Arbitrable {
    return new Arbitrable("Arbitrable", address);
  }

  arbitratorExtraData(): Bytes {
    let result = super.call(
      "arbitratorExtraData",
      "arbitratorExtraData():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_arbitratorExtraData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "arbitratorExtraData",
      "arbitratorExtraData():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  arbitrator(): Address {
    let result = super.call("arbitrator", "arbitrator():(address)", []);

    return result[0].toAddress();
  }

  try_arbitrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("arbitrator", "arbitrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RuleCall extends ethereum.Call {
  get inputs(): RuleCall__Inputs {
    return new RuleCall__Inputs(this);
  }

  get outputs(): RuleCall__Outputs {
    return new RuleCall__Outputs(this);
  }
}

export class RuleCall__Inputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }

  get _disputeID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ruling(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RuleCall__Outputs {
  _call: RuleCall;

  constructor(call: RuleCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _arbitrator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _arbitratorExtraData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
